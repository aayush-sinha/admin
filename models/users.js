// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models

const roles = ['user', 'admin'];

const roleRights = new Map();

roleRights.set(roles[0], ['getUsers', 'manageUsers', 'submitForm', 'basicPostForm']);
roleRights.set(roles[1], ['getUsers', 'manageUsers', 'submitForm', 'basicPostForm']);



module.exports = (mongoose, Mongoose) => {
  // This section contains the properties of your model, mapped to your collection's properties.
  // Learn more here: https://docs.forestadmin.com/documfentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const schema = Mongoose.Schema({
    first_name: {
      type: String,
      required: false,
      trim: true,
    },
    last_name: {
      type: String,
      required: false,
      trim: true,
    },
    title: {
      type: String,
      required: false,
      trim: true,
    },
    is_email_subscribed: {
      type: Boolean,
      required: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
      trim: true,
      lowercase: true,
      validate(value) {
        if (!validator.isEmail(value)) {
          throw new Error('Invalid email');
        }
      },
    },
    password: {
      type: String,
      required: false,
      trim: true,
      minlength: 8,
      validate(value) {
        if (!value.match(/\d/) || !value.match(/[a-zA-Z]/)) {
          throw new Error('Password must contain at least one letter and one number');
        }
      },
      private: true, // used by the toJSON plugin
    },
    zip_code: {
      type: String,
      required: false,
      trim: true,
    },
    additional_zip: {
      type: [String],
      required: false,
      trim: true,
    },
    phone_1: {
      type: Object,
      of: String,
      required: false,
      trim: true,
    },
    phone_2: {
      type: Object,
      of: String,
      required: false,
      trim: true,
    },
    gender: {
      type: String,
      required: false,
      trim: true,
    },
    address: {
      type: Object,
      of: String,
      required: false,
      trim: true,
    },
    is_verified: {
      type: Boolean,
      required: false,
    },
    user_ip: {
      type: [String],
      required: false,
      trim: true,
    },
    is_email_verified: {
      type: Boolean,
      required: false,
    },
    is_phone_verified: {
      type: Boolean,
      required: false,
    },
    promoter: {
      type: String,
      required: false,
      trim: true,
    },
    status: {
      type: Map,
      enum: roleRights,
      default: 'active',
    },
    role: {
      type: Map,
      enum: roles,
      default: 'user',
    },
    sign_up_step: {
      type: String,
      required: false,
      default: '1',
    },
  },
  {
    timestamps: true,
  });

  return mongoose.model('users', schema, 'users');
};
